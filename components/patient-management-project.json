{
  "title": "Microservices‑Based Patient Management System",
  "description": "A modular patient management platform using Java 21, Spring Boot, gRPC, Kafka, PostgreSQL, JWT, Docker, and AWS tools.",
  "image": "/patientMangement.jpg",
  "status": "2025",
  "tech": [
    "Java 21",
    "Spring Boot",
    "Spring Cloud Gateway",
    "gRPC",
    "Apache Kafka",
    "Protobuf",
    "PostgreSQL",
    "H2",
    "JWT",
    "Docker",
    "Docker Compose",
    "LocalStack",
    "AWS CloudFormation",
    "JUnit",
    "Mockito"
  ],
  "stars": "",
  "forks": "",
  "funFact": "// Real-world microservices, event-driven, and cloud-native patterns",
  "details": "Microservices architecture with modular services (Patient, Billing, Analytics, Auth) using Spring Boot, containerized with Docker Compose. gRPC for inter-service calls, Kafka (Protobuf) for event streaming, PostgreSQL/H2 for persistence, JWT auth, and AWS-style local/cloud deployment.",
  "features": [
    "Microservices: Patient, Billing, Analytics, Auth—each in its own container",
    "gRPC for efficient inter-service communication (Protobuf)",
    "Kafka event streaming for async integration (Protobuf messages)",
    "Spring Cloud Gateway for API routing and JWT security",
    "PostgreSQL (prod) & H2 (dev/test) with SQL migrations",
    "Docker Compose for local orchestration; LocalStack & CloudFormation for AWS infra",
    "Comprehensive testing with JUnit & Mockito"
  ],
  "github": "",
  "live": ""
}
